Script started on Thu 10 Feb 2022 09:03:11 PM EST
]0;tas_ta@cobra:~/csc245/Progs/Prog1[?1034h[tas_ta@cobra Prog1]$ cat editor.cpp
#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>
#include "linelist.h"

using namespace std;

void readFile(LineList &list, string line, char *argv[]);
void setFile(LineList &list, char *argv[]);
void readInput(LineList &list, string line);

//Main function which executes the functions from editor.cpp
int main(int argc, char *argv[])
{
  //if no argument is in putted
  if (argc == 1)
  {
    cout << "Error -- No Filename Entered!" << endl;
    exit(1);
  }
  //if argument is inputted
  else if (argc == 2)
  {
    LineList L;
    string line;
    
    readFile(L, line, argv);
    
    //cout << L.getCurrLineNum() << endl;
    //cout << L.getLength() << endl;
    
    readInput(L, line);
    setFile(L, argv);
    
  }
    
  return 0;
}

//Reads the file into the LineList
void readFile(LineList &list, string line, char *argv[])
{
  //int call = 0;
  ifstream file(argv[1]);
  
  //checks if file exists in current directory
  if(file)
  {
    //until the file ends
    while(file)
    {
      getline(file, line);
      if (file.eof())
        break;
      list.insertLine(line);
      
      //call++;
      //cout << call << " calls" << endl;
      //cout << list.getCurrLineNum() << endl;
      //cout << list.getLength() << endl;
        
    }
    cout << "\nL or l to display lines\nP or p to go to previous line\nN or n to go to next line\nI or i to insert line\nD or d to delete line\nH or h to display this help message again\n" << endl;
  }
  else
  {
    cout << "Error -- File Does Not Exist in Current Directory" << endl;
    exit(1);
  }
  
  
}

//Overwrites the file with the changes that the client has made
void setFile(LineList &list, char *argv[])
{
  ofstream file;
  file.open(argv[1]);
  list.goToTop();
  
  //cout << list.getCurrLineNum() << endl;
  
   
  //scans user changes and overwrites text file by traversing line by line
  for (int i = list.getCurrLineNum(); i <= list.getLength(); i++) 
  {
    //cout << i << endl;
    list.moveNextLine();
    file << list.getCurrLine() << endl;
    //cout << list.getCurrLine() << endl;
    
  }
  
  file.close();
  
}

//Reads client input to determine what functions from linelist.cpp to execute
void readInput(LineList &list, string line)
{
  list.printList();
  
  char input = ' ';
  
  //e is used to exit the while loop
  while (tolower(input) != 'e')
  {
    cout << list.getCurrLineNum() << "> ";
    cin >> input;
    
    //determine and match the cases based on input
    switch (tolower(input))
    {
      case 'i':
        cout << list.getCurrLineNum() + 1 << "> ";
        cin.ignore();
        getline(cin, line);
        list.insertLine(line);
        break;
      
      case 'd':
        list.deleteLine();
        break;
      
      case 'l':
        cout << endl;
        list.printList();
        break;
      
      case 'p':
        list.movePrevLine();
        break;
      
      case 'n':
        list.moveNextLine();
        break;
      
      case 'h':
        cout << "\nL or l to display lines\nP or p to go to previous line\nN or n to go to next line\nI or i to insert line\nD or d to delete line\nH or h to display this help message again\n" << endl;
        break;
        
    }
  }

}

]0;tas_ta@cobra:~/csc245/Progs/Prog1[tas_ta@cobra Prog1]$ cat linelist.cpp
#include <iostream>
#include "linelist.h"

LineList::LineList()
{
    LineNode* line = new LineNode;
    LineNode* line2 = new LineNode;

    line->info = topMessage;
    currLine = line;
    currLineNum = 0;
    length = 0;
    line2->info = bottomMessage;
    currLine->back = NULL;
    currLine->next = line2;
    line2->back = line;
    line2->next = NULL;
}

void LineList::goToTop()
{
    // Post : Advances currLine to line 1
    currLineNum = 1;
    while (currLine->back != NULL)
        currLine = currLine->back;

}

void LineList::goToBottom()
{
    // Post : Advances currLine to last line

    currLineNum = length;
    while (currLine->next != NULL)
        currLine = currLine->next;

}

void LineList::insertLine(string newLine)
{
    // post : newLine has been inserted after the current line

    LineNode* line = new LineNode;

    line->info = newLine;
    line->back = currLine;
    line->next = currLine->next;

    currLine->next->back = line;
    currLine->next = line;
    currLine = line;

    //cout << currLineNum << endl;

    currLineNum++;
    length++;

    //cout << currLineNum << endl;
}

void LineList::deleteLine()
{
    // post : deletes the current line leaving currentLine
    //	  pointing to line following

    if (currLine->info != bottomMessage && length > 0)
    {
                    
      if (currLineNum > 1)
      {
          LineNode* line = new LineNode;
          line = currLine;

          currLine->next->back = line->back;
          currLine->back->next = line->next;
          currLine = line->back;

          currLineNum--;
          length--;

      }
      else if (currLineNum == 1)
      {
          //currLine->next = currLine;
          //currLine->back = currLine;                                                

          LineNode* line = new LineNode;
          line = currLine;

          //cout << line << endl;
                                  
          currLine->next->back = line->back;
          currLine->back->next = line->next;
          currLine = line->back;

          if (length == 1)
          {
              currLineNum = 0;
          }
          else
          {
              currLineNum--;
                                                             
          }
          
          length--; 
          
      }
      
      //cout << length << endl;
      //cout << currLineNum << endl;

    }

}

void LineList::printList()
{
    int tempNum = currLineNum;
    LineNode* line = new LineNode;
    line = currLine;
  
    goToTop();
    for (currLineNum; currLineNum <= length; currLineNum++)
    {
        cout << currLineNum << "> " << currLine->next->info << endl;
        currLine = currLine->next;
  
    }
  
    currLine = line;
    currLineNum = tempNum;

}

string LineList::getCurrLine() const
{
    return currLine->info;

}

void LineList::moveNextLine()
{
    // Post : Advances currLine (unless already at last line)
    if (currLine->next->info != bottomMessage && currLineNum <= length)
    {
        currLine = currLine->next;
        currLineNum++;
    }

}

void LineList::movePrevLine()
{
    // Post : Advances currLine (unless already at last line)
    if (currLineNum > 0 && length > 0 && currLine->back->info != topMessage)
    {
        currLine = currLine->back;
        currLineNum--;
    }

}

int LineList::getCurrLineNum() const
{
    return currLineNum;

}

int LineList::getLength() const
{
    return length;

}
]0;tas_ta@cobra:~/csc245/Progs/Prog1[tas_ta@cobra Prog1]$ c++ editor.cpp linelist.o
]0;tas_ta@cobra:~/csc245/Progs/Prog1[tas_ta@cobra Prog1]$ ./a.out testfile

L or l to display lines
P or p to go to previous line
N or n to go to next line
I or i to insert line
D or d to delete line
H or h to display this help message again

1> This is my first line.
2> inserted
3> This is my second line.
3> p
2> d
1> l

1> This is my first line.
2> This is my second line.
1> n
2> n
2> i
3> This is my third line
3> l

1> This is my first line.
2> This is my second line.
3> This is my third line
3> e
]0;tas_ta@cobra:~/csc245/Progs/Prog1[tas_ta@cobra Prog1]$ ./a.out testfile

L or l to display lines
P or p to go to previous line
N or n to go to next line
I or i to insert line
D or d to delete line
H or h to display this help message again

1> This is my first line.
2> This is my second line.
3> This is my third line
3> e
]0;tas_ta@cobra:~/csc245/Progs/Prog1[tas_ta@cobra Prog1]$ exit
exit

Script done on Thu 10 Feb 2022 09:04:18 PM EST
